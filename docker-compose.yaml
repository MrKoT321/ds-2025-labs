services:
  redis:
    container_name: app-redis
    image: redis:8.0-rc1
    volumes:
      - redis_data:/data
      - ./conf/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      
  redis-ru:
    container_name: app-redis-ru
    image: redis:8.0-rc1
    volumes:
      - redis_ru_data:/data
      - ./conf/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6381:6379"
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    networks:
      - app-network
      
  redis-eu:
    container_name: app-redis-eu
    image: redis:8.0-rc1
    volumes:
      - redis_eu_data:/data
      - ./conf/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6382:6379"
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    networks:
      - app-network
  
  redis-asia:
    container_name: app-redis-asia
    image: redis:8.0-rc1
    volumes:
      - redis_asia_data:/data
      - ./conf/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6383:6379"
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    networks:
      - app-network
      
  redis-user:
    image: redis
    container_name: redis-user
    ports:
      - "6384:6379"
    volumes:
      - redis_user_data:/data
      - ./conf/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    networks:
      - app-network
        
  redis-test:
    container_name: redis-test
    image: redis:8.0-rc1
    ports:
      - "6380:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - redis_test_data:/data      
  
  rankcalculator:
    container_name: rank-calculator
    build:
      context: .
      dockerfile: RankCalculator/Dockerfile
    ports:
      - "5003:5003"
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - app-network
        
  eventslogger1:
    container_name: events-logger1
    volumes:
      - events_logger_data:/var/lib/logger
    build:
      context: .
      dockerfile: EventsLogger/Dockerfile
    environment:
      - INSTANCE_ID=logger1
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
        
  eventslogger2:
    container_name: events-logger2
    volumes:
      - events_logger_data:/var/lib/logger
    build:
      context: .
      dockerfile: EventsLogger/Dockerfile
    environment:
      - INSTANCE_ID=logger2
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  webapp1:
    container_name: webapp1
    volumes:
      - redis_data:/root/.aspnet/DataProtection-Keys
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - app-network
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  webapp2:
    container_name: webapp2
    volumes:
      - redis_data:/root/.aspnet/DataProtection-Keys
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - app-network
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
        
  rabbitmq:
    build:
      context: ./rabbitmq
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network 

  nginx:
    container_name: app-nginx
    image: nginx:latest
    volumes:
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - webapp1
      - webapp2

volumes:
  redis_data:
  redis_ru_data:
  redis_eu_data:
  redis_asia_data:
  redis_test_data:
  rabbitmq_data:
  events_logger_data:
  redis_user_data:

networks:
  app-network:
      driver: bridge
